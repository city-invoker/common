// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ggg_user_server.proto

#include "ggg_user_server.pb.h"
#include "ggg_user_server.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace ggg_user {

static const char* GggUserServer_method_names[] = {
  "/ggg_user.GggUserServer/UserLogin",
  "/ggg_user.GggUserServer/UserLogOut",
};

std::unique_ptr< GggUserServer::Stub> GggUserServer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< GggUserServer::Stub> stub(new GggUserServer::Stub(channel, options));
  return stub;
}

GggUserServer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_UserLogin_(GggUserServer_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UserLogOut_(GggUserServer_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status GggUserServer::Stub::UserLogin(::grpc::ClientContext* context, const ::ggg_user::UserLoginReq& request, ::ggg_user::UserLoginRsp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ggg_user::UserLoginReq, ::ggg_user::UserLoginRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UserLogin_, context, request, response);
}

void GggUserServer::Stub::async::UserLogin(::grpc::ClientContext* context, const ::ggg_user::UserLoginReq* request, ::ggg_user::UserLoginRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ggg_user::UserLoginReq, ::ggg_user::UserLoginRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UserLogin_, context, request, response, std::move(f));
}

void GggUserServer::Stub::async::UserLogin(::grpc::ClientContext* context, const ::ggg_user::UserLoginReq* request, ::ggg_user::UserLoginRsp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UserLogin_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ggg_user::UserLoginRsp>* GggUserServer::Stub::PrepareAsyncUserLoginRaw(::grpc::ClientContext* context, const ::ggg_user::UserLoginReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ggg_user::UserLoginRsp, ::ggg_user::UserLoginReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UserLogin_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ggg_user::UserLoginRsp>* GggUserServer::Stub::AsyncUserLoginRaw(::grpc::ClientContext* context, const ::ggg_user::UserLoginReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUserLoginRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GggUserServer::Stub::UserLogOut(::grpc::ClientContext* context, const ::ggg_user::UserLogOutReq& request, ::ggg_user::UserLogOutRsp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ggg_user::UserLogOutReq, ::ggg_user::UserLogOutRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UserLogOut_, context, request, response);
}

void GggUserServer::Stub::async::UserLogOut(::grpc::ClientContext* context, const ::ggg_user::UserLogOutReq* request, ::ggg_user::UserLogOutRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ggg_user::UserLogOutReq, ::ggg_user::UserLogOutRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UserLogOut_, context, request, response, std::move(f));
}

void GggUserServer::Stub::async::UserLogOut(::grpc::ClientContext* context, const ::ggg_user::UserLogOutReq* request, ::ggg_user::UserLogOutRsp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UserLogOut_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ggg_user::UserLogOutRsp>* GggUserServer::Stub::PrepareAsyncUserLogOutRaw(::grpc::ClientContext* context, const ::ggg_user::UserLogOutReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ggg_user::UserLogOutRsp, ::ggg_user::UserLogOutReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UserLogOut_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ggg_user::UserLogOutRsp>* GggUserServer::Stub::AsyncUserLogOutRaw(::grpc::ClientContext* context, const ::ggg_user::UserLogOutReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUserLogOutRaw(context, request, cq);
  result->StartCall();
  return result;
}

GggUserServer::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GggUserServer_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GggUserServer::Service, ::ggg_user::UserLoginReq, ::ggg_user::UserLoginRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GggUserServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ggg_user::UserLoginReq* req,
             ::ggg_user::UserLoginRsp* resp) {
               return service->UserLogin(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GggUserServer_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GggUserServer::Service, ::ggg_user::UserLogOutReq, ::ggg_user::UserLogOutRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GggUserServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ggg_user::UserLogOutReq* req,
             ::ggg_user::UserLogOutRsp* resp) {
               return service->UserLogOut(ctx, req, resp);
             }, this)));
}

GggUserServer::Service::~Service() {
}

::grpc::Status GggUserServer::Service::UserLogin(::grpc::ServerContext* context, const ::ggg_user::UserLoginReq* request, ::ggg_user::UserLoginRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GggUserServer::Service::UserLogOut(::grpc::ServerContext* context, const ::ggg_user::UserLogOutReq* request, ::ggg_user::UserLogOutRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace ggg_user

