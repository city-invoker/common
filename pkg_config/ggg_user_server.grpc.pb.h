// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ggg_user_server.proto
// Original file comments:
// Copyright 2023 skylanwei authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_ggg_5fuser_5fserver_2eproto__INCLUDED
#define GRPC_ggg_5fuser_5fserver_2eproto__INCLUDED

#include "ggg_user_server.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace ggg_user {

// The user server's service definition.
class GggUserServer final {
 public:
  static constexpr char const* service_full_name() {
    return "ggg_user.GggUserServer";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // rpc UserRegister (UserRegisterReq) returns (UserRegisterRsp) {}
    //
    virtual ::grpc::Status UserLogin(::grpc::ClientContext* context, const ::ggg_user::UserLoginReq& request, ::ggg_user::UserLoginRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ggg_user::UserLoginRsp>> AsyncUserLogin(::grpc::ClientContext* context, const ::ggg_user::UserLoginReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ggg_user::UserLoginRsp>>(AsyncUserLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ggg_user::UserLoginRsp>> PrepareAsyncUserLogin(::grpc::ClientContext* context, const ::ggg_user::UserLoginReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ggg_user::UserLoginRsp>>(PrepareAsyncUserLoginRaw(context, request, cq));
    }
    virtual ::grpc::Status UserLogOut(::grpc::ClientContext* context, const ::ggg_user::UserLogOutReq& request, ::ggg_user::UserLogOutRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ggg_user::UserLogOutRsp>> AsyncUserLogOut(::grpc::ClientContext* context, const ::ggg_user::UserLogOutReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ggg_user::UserLogOutRsp>>(AsyncUserLogOutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ggg_user::UserLogOutRsp>> PrepareAsyncUserLogOut(::grpc::ClientContext* context, const ::ggg_user::UserLogOutReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ggg_user::UserLogOutRsp>>(PrepareAsyncUserLogOutRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // rpc UserRegister (UserRegisterReq) returns (UserRegisterRsp) {}
      //
      virtual void UserLogin(::grpc::ClientContext* context, const ::ggg_user::UserLoginReq* request, ::ggg_user::UserLoginRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UserLogin(::grpc::ClientContext* context, const ::ggg_user::UserLoginReq* request, ::ggg_user::UserLoginRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UserLogOut(::grpc::ClientContext* context, const ::ggg_user::UserLogOutReq* request, ::ggg_user::UserLogOutRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UserLogOut(::grpc::ClientContext* context, const ::ggg_user::UserLogOutReq* request, ::ggg_user::UserLogOutRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ggg_user::UserLoginRsp>* AsyncUserLoginRaw(::grpc::ClientContext* context, const ::ggg_user::UserLoginReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ggg_user::UserLoginRsp>* PrepareAsyncUserLoginRaw(::grpc::ClientContext* context, const ::ggg_user::UserLoginReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ggg_user::UserLogOutRsp>* AsyncUserLogOutRaw(::grpc::ClientContext* context, const ::ggg_user::UserLogOutReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ggg_user::UserLogOutRsp>* PrepareAsyncUserLogOutRaw(::grpc::ClientContext* context, const ::ggg_user::UserLogOutReq& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status UserLogin(::grpc::ClientContext* context, const ::ggg_user::UserLoginReq& request, ::ggg_user::UserLoginRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ggg_user::UserLoginRsp>> AsyncUserLogin(::grpc::ClientContext* context, const ::ggg_user::UserLoginReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ggg_user::UserLoginRsp>>(AsyncUserLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ggg_user::UserLoginRsp>> PrepareAsyncUserLogin(::grpc::ClientContext* context, const ::ggg_user::UserLoginReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ggg_user::UserLoginRsp>>(PrepareAsyncUserLoginRaw(context, request, cq));
    }
    ::grpc::Status UserLogOut(::grpc::ClientContext* context, const ::ggg_user::UserLogOutReq& request, ::ggg_user::UserLogOutRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ggg_user::UserLogOutRsp>> AsyncUserLogOut(::grpc::ClientContext* context, const ::ggg_user::UserLogOutReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ggg_user::UserLogOutRsp>>(AsyncUserLogOutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ggg_user::UserLogOutRsp>> PrepareAsyncUserLogOut(::grpc::ClientContext* context, const ::ggg_user::UserLogOutReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ggg_user::UserLogOutRsp>>(PrepareAsyncUserLogOutRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void UserLogin(::grpc::ClientContext* context, const ::ggg_user::UserLoginReq* request, ::ggg_user::UserLoginRsp* response, std::function<void(::grpc::Status)>) override;
      void UserLogin(::grpc::ClientContext* context, const ::ggg_user::UserLoginReq* request, ::ggg_user::UserLoginRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UserLogOut(::grpc::ClientContext* context, const ::ggg_user::UserLogOutReq* request, ::ggg_user::UserLogOutRsp* response, std::function<void(::grpc::Status)>) override;
      void UserLogOut(::grpc::ClientContext* context, const ::ggg_user::UserLogOutReq* request, ::ggg_user::UserLogOutRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::ggg_user::UserLoginRsp>* AsyncUserLoginRaw(::grpc::ClientContext* context, const ::ggg_user::UserLoginReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ggg_user::UserLoginRsp>* PrepareAsyncUserLoginRaw(::grpc::ClientContext* context, const ::ggg_user::UserLoginReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ggg_user::UserLogOutRsp>* AsyncUserLogOutRaw(::grpc::ClientContext* context, const ::ggg_user::UserLogOutReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ggg_user::UserLogOutRsp>* PrepareAsyncUserLogOutRaw(::grpc::ClientContext* context, const ::ggg_user::UserLogOutReq& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_UserLogin_;
    const ::grpc::internal::RpcMethod rpcmethod_UserLogOut_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // rpc UserRegister (UserRegisterReq) returns (UserRegisterRsp) {}
    //
    virtual ::grpc::Status UserLogin(::grpc::ServerContext* context, const ::ggg_user::UserLoginReq* request, ::ggg_user::UserLoginRsp* response);
    virtual ::grpc::Status UserLogOut(::grpc::ServerContext* context, const ::ggg_user::UserLogOutReq* request, ::ggg_user::UserLogOutRsp* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_UserLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UserLogin() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_UserLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UserLogin(::grpc::ServerContext* /*context*/, const ::ggg_user::UserLoginReq* /*request*/, ::ggg_user::UserLoginRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUserLogin(::grpc::ServerContext* context, ::ggg_user::UserLoginReq* request, ::grpc::ServerAsyncResponseWriter< ::ggg_user::UserLoginRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UserLogOut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UserLogOut() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_UserLogOut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UserLogOut(::grpc::ServerContext* /*context*/, const ::ggg_user::UserLogOutReq* /*request*/, ::ggg_user::UserLogOutRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUserLogOut(::grpc::ServerContext* context, ::ggg_user::UserLogOutReq* request, ::grpc::ServerAsyncResponseWriter< ::ggg_user::UserLogOutRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_UserLogin<WithAsyncMethod_UserLogOut<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_UserLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UserLogin() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::ggg_user::UserLoginReq, ::ggg_user::UserLoginRsp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ggg_user::UserLoginReq* request, ::ggg_user::UserLoginRsp* response) { return this->UserLogin(context, request, response); }));}
    void SetMessageAllocatorFor_UserLogin(
        ::grpc::MessageAllocator< ::ggg_user::UserLoginReq, ::ggg_user::UserLoginRsp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ggg_user::UserLoginReq, ::ggg_user::UserLoginRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UserLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UserLogin(::grpc::ServerContext* /*context*/, const ::ggg_user::UserLoginReq* /*request*/, ::ggg_user::UserLoginRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UserLogin(
      ::grpc::CallbackServerContext* /*context*/, const ::ggg_user::UserLoginReq* /*request*/, ::ggg_user::UserLoginRsp* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UserLogOut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UserLogOut() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::ggg_user::UserLogOutReq, ::ggg_user::UserLogOutRsp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ggg_user::UserLogOutReq* request, ::ggg_user::UserLogOutRsp* response) { return this->UserLogOut(context, request, response); }));}
    void SetMessageAllocatorFor_UserLogOut(
        ::grpc::MessageAllocator< ::ggg_user::UserLogOutReq, ::ggg_user::UserLogOutRsp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ggg_user::UserLogOutReq, ::ggg_user::UserLogOutRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UserLogOut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UserLogOut(::grpc::ServerContext* /*context*/, const ::ggg_user::UserLogOutReq* /*request*/, ::ggg_user::UserLogOutRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UserLogOut(
      ::grpc::CallbackServerContext* /*context*/, const ::ggg_user::UserLogOutReq* /*request*/, ::ggg_user::UserLogOutRsp* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_UserLogin<WithCallbackMethod_UserLogOut<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_UserLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UserLogin() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_UserLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UserLogin(::grpc::ServerContext* /*context*/, const ::ggg_user::UserLoginReq* /*request*/, ::ggg_user::UserLoginRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UserLogOut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UserLogOut() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_UserLogOut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UserLogOut(::grpc::ServerContext* /*context*/, const ::ggg_user::UserLogOutReq* /*request*/, ::ggg_user::UserLogOutRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_UserLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UserLogin() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_UserLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UserLogin(::grpc::ServerContext* /*context*/, const ::ggg_user::UserLoginReq* /*request*/, ::ggg_user::UserLoginRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUserLogin(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UserLogOut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UserLogOut() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_UserLogOut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UserLogOut(::grpc::ServerContext* /*context*/, const ::ggg_user::UserLogOutReq* /*request*/, ::ggg_user::UserLogOutRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUserLogOut(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UserLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UserLogin() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UserLogin(context, request, response); }));
    }
    ~WithRawCallbackMethod_UserLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UserLogin(::grpc::ServerContext* /*context*/, const ::ggg_user::UserLoginReq* /*request*/, ::ggg_user::UserLoginRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UserLogin(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UserLogOut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UserLogOut() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UserLogOut(context, request, response); }));
    }
    ~WithRawCallbackMethod_UserLogOut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UserLogOut(::grpc::ServerContext* /*context*/, const ::ggg_user::UserLogOutReq* /*request*/, ::ggg_user::UserLogOutRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UserLogOut(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UserLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UserLogin() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ggg_user::UserLoginReq, ::ggg_user::UserLoginRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ggg_user::UserLoginReq, ::ggg_user::UserLoginRsp>* streamer) {
                       return this->StreamedUserLogin(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UserLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UserLogin(::grpc::ServerContext* /*context*/, const ::ggg_user::UserLoginReq* /*request*/, ::ggg_user::UserLoginRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUserLogin(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ggg_user::UserLoginReq,::ggg_user::UserLoginRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UserLogOut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UserLogOut() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ggg_user::UserLogOutReq, ::ggg_user::UserLogOutRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ggg_user::UserLogOutReq, ::ggg_user::UserLogOutRsp>* streamer) {
                       return this->StreamedUserLogOut(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UserLogOut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UserLogOut(::grpc::ServerContext* /*context*/, const ::ggg_user::UserLogOutReq* /*request*/, ::ggg_user::UserLogOutRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUserLogOut(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ggg_user::UserLogOutReq,::ggg_user::UserLogOutRsp>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_UserLogin<WithStreamedUnaryMethod_UserLogOut<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_UserLogin<WithStreamedUnaryMethod_UserLogOut<Service > > StreamedService;
};

}  // namespace ggg_user


#endif  // GRPC_ggg_5fuser_5fserver_2eproto__INCLUDED
